from Lab12 import binsearch
import unittest
import random


class KnownValues(unittest.TestCase):
    knownValues = ();

    def testSearchResult(self):

        testcase = (
( [35, 108, 140, 166, 199, 207, 275, 303, 382, 450, 559, 674, 896, 921, 924, 936, 945, 981] , 207 , 5 ),
( [126, 160, 323, 342, 899] , 342 , 3 ),
( [4, 109, 358, 449, 478, 586, 604, 718, 970] , 718 , 7 ),
( [3, 25, 509, 592, 659, 659, 766, 795, 804, 835, 858, 867] , 509 , 2 ),
( [53, 296, 333, 456, 532, 563, 577, 583, 595, 636, 705, 820, 923, 946, 975] , 705 , 10 ),
( [56, 389, 594, 599, 904] , 389 , 1 ),
( [46, 67, 151, 151, 247, 419, 439, 470, 518, 518, 537, 576, 657, 867, 917, 963] , 518 , 9 ),
( [109, 150, 363, 440, 641, 806, 859, 898, 953] , 953 , 8 ),
( [81, 234, 314, 349, 373, 385, 410, 416, 457, 613, 641, 645, 669, 799, 839, 896, 966, 981] , 410 , 6 ),
( [128, 304, 348, 397, 439, 453, 642, 753, 850, 872, 922] , 128 , 0 ),
( [96, 116, 127, 150, 177, 233, 276, 331, 343, 371, 452, 622, 719, 738, 747, 759, 821, 891, 974] , 331 , 7 ),
( [103, 146, 252, 319, 332, 403, 435, 444, 503, 514, 542, 558, 563, 724, 814, 917, 948] , 444 , 7 ),
( [47, 50, 111, 164, 248, 350, 450, 507, 526, 926] , 50 , 1 ),
( [71, 104, 208, 362, 657, 976, 989] , 657 , 4 ),
( [95, 116, 217, 260, 278, 306, 368, 464, 607, 687, 699, 709, 809, 918, 921, 968] , 918 , 13 ),
( [31, 120, 149, 292, 353, 518, 599, 636, 870] , 120 , 1 ),
( [5, 13, 45, 198, 310, 528, 641, 795] , 310 , 4 ),
( [51, 133, 169, 184, 240, 326, 335, 355, 374, 384, 697, 728] , 374 , 8 ),
( [85, 150, 201, 331, 342, 469, 674] , 85 , 0 ),
( [209, 382, 445, 487, 636, 843, 932] , 209 , 0 ),
( [143, 157, 347, 468, 528, 710, 760, 779, 780, 934] , 143 , 0 ),
( [127, 320, 360, 388, 486, 492, 645, 852, 903, 932, 933, 942] , 903 , 8 ),
( [126, 228, 258, 384, 515, 692] , 258 , 2 ),
( [1, 45, 126, 130, 149, 196, 298, 320, 379, 398, 418, 420, 421, 476, 560, 705, 760, 803, 899, 983] , 379 , 8 ),
( [105, 281, 349, 424, 708, 799] , 349 , 2 ),
( [4, 76, 213, 256, 261, 308, 416, 486, 600, 620, 645, 859, 951, 986] , 951 , 12 ),
( [31, 34, 72, 219, 230, 248, 270, 397, 406, 474, 481, 547, 586, 680, 767, 785, 816, 857, 931] , 680 , 13 ),
( [48, 144, 177, 228, 296, 450, 473, 477, 483, 551, 553, 616, 639, 736, 837, 840, 934] , 736 , 13 ),
( [9, 16, 83, 89, 126, 162, 164, 174, 303, 384, 411, 476, 571, 679, 706, 739, 918] , 164 , 6 ),
( [0, 292, 296, 321, 326, 407, 415, 494, 558, 593, 596, 778, 800, 844, 905, 906, 937, 940] , 296 , 2 ),
( [77, 136, 137, 402, 430, 577, 604, 627, 630, 734, 779, 812, 818, 846, 869, 882, 1000] , 630 , 8 ),
( [0, 5, 80, 164, 276, 306, 316, 403, 413, 437, 547, 598, 665, 672, 685] , 685 , 14 ),
( [65, 159, 173, 188, 272, 286, 293, 650, 669, 765, 769, 771, 802, 886, 890, 890] , 173 , 2 ),
( [217, 251, 308, 498, 600] , 251 , 1 ),
( [27, 43, 44, 217, 222, 277, 315, 392, 402, 465, 478, 527, 661, 749, 804, 871] , 478 , 10 ),
( [4, 87, 143, 171, 217, 400, 401, 438, 479, 529, 555, 572, 590, 654, 660, 801] , 572 , 11 ),
( [28, 112, 220, 324, 600, 651, 672, 694, 697, 716, 738, 759, 764, 788, 867, 904] , 738 , 10 ),
( [50, 262, 530, 644, 704, 710, 785, 860, 889] , 50 , 0 ),
( [153, 642, 747, 813, 937] , 153 , 0 ),
( [15, 153, 236, 243, 259, 361, 372, 412, 433, 498, 556, 572, 702, 757, 821, 896, 912, 929, 948] , 912 , 16 ),
( [47, 65, 157, 302, 641, 695, 737, 791] , 695 , 5 ),
( [332, 470, 533, 622, 704, 902] , 622 , 3 ),
( [8, 84, 90, 105, 204, 223, 229, 235, 296, 420, 516, 606, 741, 804, 865, 984, 992] , 420 , 9 ),
( [124, 172, 361, 379, 474] , 474 , 4 ),
( [4, 46, 74, 135, 135, 187, 231, 327, 355, 386, 503, 551, 600, 625, 714, 746, 750] , 46 , 1 ),
( [116, 157, 287, 427, 444, 532, 595, 768, 787, 844] , 157 , 1 ),
( [87, 106, 147, 268, 331, 549, 630, 690, 727, 771, 967] , 268 , 3 ),
( [50, 239, 367, 439, 468, 613, 744, 793, 890, 904, 976] , 468 , 4 ),
( [165, 232, 371, 395, 456, 557, 620, 622, 722, 989] , 395 , 3 ),
( [12, 66, 73, 120, 161, 281, 539, 571, 588, 636, 667, 709, 803, 822, 879, 925, 958] , 636 , 9 ),
( [28, 39, 106, 281, 391, 462, 472, 479, 566, 715, 724, 760, 817, 824, 918, 952] , 817 , 12 ),
( [46, 222, 422, 434, 461, 551, 578, 884, 888, 965] , 222 , 1 ),
( [59, 91, 706, 707, 836, 925, 955] , 91 , 1 ),
( [15, 40, 91, 195, 205, 367, 392, 483, 494, 564, 639, 705, 796, 908, 946] , 392 , 6 ),
( [25, 128, 153, 158, 209, 281, 297, 527, 608, 622, 722, 794, 954] , 209 , 4 ),
( [35, 308, 340, 429, 508, 551, 864, 918] , 864 , 6 ),
( [1, 188, 201, 263, 345, 494, 594, 624, 963] , 624 , 7 ),
( [69, 254, 263, 306, 336, 346, 656, 997] , 656 , 6 ),
( [28, 48, 65, 220, 232, 268, 304, 355, 391, 574, 925, 983, 997] , 391 , 8 ),
( [7, 41, 106, 116, 175, 184, 242, 323, 393, 433, 434, 502, 533, 536, 581, 642, 652, 752, 785, 931] , 642 , 15 ),
( [59, 259, 557, 658, 662, 806, 882, 919] , 557 , 2 ),
( [12, 105, 203, 335, 342, 457, 474, 517, 578, 649, 677, 729, 784, 981] , 203 , 2 ),
( [10, 12, 70, 263, 310, 458, 555, 574, 583, 645, 657, 884, 888, 957] , 574 , 7 ),
( [24, 40, 57, 75, 83, 491, 508, 514, 568, 639, 645, 729, 835, 928] , 491 , 5 ),
( [103, 165, 187, 397, 987, 999] , 165 , 1 ),
( [337, 461, 502, 574, 626, 643, 722, 797, 863, 878, 914, 921] , 643 , 5 ),
( [33, 50, 107, 108, 289, 395, 399, 417, 450, 537, 629, 783, 923] , 629 , 10 ),
( [67, 252, 382, 453, 500, 518, 558, 724, 725, 771, 792, 796] , 771 , 9 ),
( [65, 82, 85, 139, 208, 244, 305, 373, 592, 643, 668, 705, 720, 782, 866, 915, 951] , 705 , 11 ),
( [18, 41, 234, 388, 474, 487, 498, 638, 680] , 498 , 6 ),
( [18, 54, 205, 226, 247, 266, 273, 308, 358, 363, 513, 766, 806, 829] , 205 , 2 ),
( [2, 47, 148, 183, 273, 375, 451, 453, 461, 561, 589, 622, 652, 669, 876, 951] , 375 , 5 ),
( [40, 84, 124, 175, 232, 255, 303, 323, 359, 620, 632, 705, 731, 742, 742, 958, 970, 997] , 705 , 11 ),
( [21, 27, 171, 290, 395, 414, 420, 480, 625, 632, 693, 703, 749, 773, 793, 856, 927, 942] , 749 , 12 ),
( [16, 25, 101, 144, 194, 216, 251, 277, 325, 349, 424, 441, 458, 574, 704, 816, 827, 934] , 16 , 0 ),
( [31, 53, 91, 144, 364, 493, 521, 522, 555, 559, 610, 735, 797, 810, 912, 926, 955, 981, 983] , 493 , 5 ),
( [40, 124, 129, 382, 413, 433, 456, 458, 463, 595, 609, 653, 716, 739, 822, 861] , 124 , 1 ),
( [14, 49, 170, 207, 375, 601, 617, 768, 819, 931, 959] , 14 , 0 ),
( [116, 256, 536, 568, 609, 638, 925] , 256 , 1 ),
( [2, 151, 157, 361, 483, 513, 664, 696, 772, 775, 797, 808, 833] , 513 , 5 ),
( [52, 104, 165, 239, 293, 404, 575, 663, 682, 820, 943] , 239 , 3 ),
( [153, 438, 599, 620, 751, 756, 785, 944, 985] , 944 , 7 ),
( [30, 103, 132, 177, 191, 201, 258, 348, 358, 370, 568, 618, 624, 752, 758, 799, 944, 976] , 191 , 4 ),
( [40, 111, 114, 131, 145, 280, 291, 368, 390, 394, 476, 526, 537, 548, 629, 808, 825, 859, 957, 958] , 957 , 18 ),
( [121, 139, 191, 358, 416, 452, 501, 629, 892, 919, 947] , 416 , 4 ),
( [41, 303, 350, 465, 525, 545, 552, 661, 664, 738, 749, 815, 849, 886, 963] , 815 , 11 ),
( [103, 117, 298, 483, 543, 736, 767, 982, 991] , 483 , 3 ),
( [22, 36, 79, 97, 123, 215, 323, 367, 377, 494, 541, 580, 587, 600, 608, 689, 923, 949, 967] , 215 , 5 ),
( [372, 392, 684, 726, 757, 790, 840, 939, 985] , 392 , 1 ),
( [45, 95, 124, 191, 272, 329, 359, 405, 534, 604, 604, 618, 650, 691, 764, 771, 808, 896, 929, 931] , 650 , 12 ),
( [7, 47, 51, 60, 250, 404, 501, 515, 531, 616, 634, 895, 934, 979, 994] , 51 , 2 ),
( [206, 224, 299, 369, 418, 442, 509, 512, 561, 579, 595, 656, 715] , 579 , 9 ),
( [53, 274, 276, 316, 430, 468, 538, 581, 679, 789, 795, 819, 855, 920, 922, 951, 958, 970, 978] , 819 , 11 ),
( [93, 105, 239, 291, 338, 375, 388, 389, 675, 691, 699] , 388 , 6 ),
( [32, 50, 54, 69, 119, 255, 309, 329, 404, 504, 753, 839, 916, 935, 992] , 753 , 10 ),
( [29, 302, 475, 554, 583, 611, 759, 818] , 759 , 6 ),
( [12, 152, 226, 234, 238, 271, 282, 379, 734, 749, 931, 942, 948, 986] , 271 , 5 ),
( [0, 116, 273, 364, 448, 606, 835] , 835 , 6 ),
( [44, 156, 160, 167, 172, 237, 369, 448, 534, 624, 653, 691, 814, 849] , 691 , 11 ),
( [77, 169, 217, 288, 361, 366, 414, 452, 488, 504, 556, 597, 663, 715, 723, 753, 761, 782, 861, 974] , 288 , 3 )
)

        for i in range(len(testcase)):

            key = testcase[i][1]
            status = False;
            selectedPosi = binsearch.binsearch(testcase[i][0], key)
            for m in range(len(testcase[i][0])):

                if(testcase[i][0][m] == key):
                    if (selectedPosi == m):
                        status = True
                        break
            self.assertTrue(status)
        '''
            print("(")
        for i in range(100):
            inputArray = []
            arraysize = random.randint(5, 20)

            for m in range(arraysize):
                member = random.randint(0, 1000)
                inputArray.append(member)
                inputArray.sort()

            key = inputArray[random.randint(0, arraysize - 1)]
            status = False;
            for m in range(arraysize):
                selectedPosi = binsearch.binsearch(inputArray,key);
                if(selectedPosi == m):
                    status = True
                    break

            print("(",inputArray,",", key ,",", selectedPosi,"),")
            self.assertTrue(status)
        print(")")
        '''

class SanityTest(unittest.TestCase):
    dataList = [ x for x in range(10**4) ]

    def testResultInRange(self):
        for key in range(10**4):
            i = binsearch.binsearch(self.dataList, key)
            if isinstance(i, int):
                self.assertTrue(i in range(len(self.dataList)))

    def testResultIsCorrectPosition(self):
        for key in range(10**4):
            i = binsearch.binsearch(self.dataList, key)
            if isinstance(i, int):
                self.assertEqual(key, self.dataList[i])

    def testKeyDoesNotExist(self):
        for key in range(10**4):
            i = binsearch.binsearch(self.dataList, key)
            if i == None:
                self.assertTrue(key not in self.dataList)


class FailureTest(unittest.TestCase):
    def testNotList(self):
        self.assertRaises(binsearch.InvalidArgument, binsearch.binsearch, 'hello', 5)
        self.assertRaises(binsearch.InvalidArgument, binsearch.binsearch, (1, 2), 0)
        self.assertRaises(binsearch.InvalidArgument, binsearch.binsearch, dict(), 25)
        self.assertRaises(binsearch.InvalidArgument, binsearch.binsearch, None, 50)






if __name__ == "__main__":
    unittest.main()

